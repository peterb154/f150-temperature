#include <Arduino.h>
#include <driver/twai.h>
#include <pins.h>
#include <colors.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_ILI9341.h>
#include <Fonts/FreeSansBold18pt7b.h>
#include <Fonts/FreeSans12pt7b.h>
#include <Fonts/FreeSans9pt7b.h>

// Create TFT instance
Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_MOSI, TFT_CLK, TFT_RST, TFT_MISO);

// Global variables
unsigned long sessionStartTime;
unsigned long messageCount = 0;
unsigned long markerCount = 0;

// Function declarations
void initCAN();
void initDisplay();
void processSerialCommand();
void updateDisplay();

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("F150_CAN_LOGGER_START");
  Serial.println("# Simple marker-based capture");
  Serial.println("# Type 'x' to insert markers (start/stop HVAC adjustment)");
  Serial.println("TIMESTAMP_MS,ELAPSED_MS,CAN_ID,LENGTH,BYTE0,BYTE1,BYTE2,BYTE3,BYTE4,BYTE5,BYTE6,BYTE7,EXTENDED");
  
  // Initialize pins
  pinMode(STATUS_LED_PIN, OUTPUT);
  digitalWrite(STATUS_LED_PIN, HIGH);
  
  // Initialize display
  initDisplay();
  
  // Initialize CAN bus
  initCAN();
  
  Serial.println("# Setup complete. Capture starting immediately!");
  Serial.println("# Send 'x' to mark start/stop of HVAC changes");
  
  sessionStartTime = millis();
  digitalWrite(STATUS_LED_PIN, LOW);
  updateDisplay();
}

void initDisplay() {
  // Initialize the backlight pin
  pinMode(TFT_LED, OUTPUT);
  digitalWrite(TFT_LED, HIGH);  // Turn on backlight
  
  tft.begin();
  tft.setRotation(1);  // Landscape
  tft.fillScreen(COLOR_BACKGROUND);
  
  // Show initialization message
  tft.setTextColor(COLOR_TEXT);
  tft.setFont(&FreeSans12pt7b);
  tft.setCursor(50, 100);
  tft.println("F150 CAN Logger");
  tft.setFont(&FreeSans9pt7b);
  tft.setCursor(70, 130);
  tft.println("Initializing...");
}

void initCAN() {
  pinMode(CAN_RX_PIN, INPUT);
  pinMode(CAN_TX_PIN, OUTPUT);
  
  // Update display
  tft.fillRect(0, 110, 320, 30, COLOR_BACKGROUND);
  tft.setTextColor(COLOR_TEXT);
  tft.setFont(&FreeSans9pt7b);
  tft.setCursor(50, 130);
  tft.println("Connecting CAN 125KBPS...");
  
  Serial.println("# Initializing CAN at 125KBPS for 2011 F150...");
  
  // Configure TWAI for 125KBPS
  twai_general_config_t g_config = TWAI_GENERAL_CONFIG_DEFAULT(
    (gpio_num_t)CAN_TX_PIN, 
    (gpio_num_t)CAN_RX_PIN, 
    TWAI_MODE_LISTEN_ONLY
  );
  
  twai_timing_config_t t_config = TWAI_TIMING_CONFIG_125KBITS();
  twai_filter_config_t f_config = TWAI_FILTER_CONFIG_ACCEPT_ALL();
  
  // Install and start
  if (twai_driver_install(&g_config, &t_config, &f_config) == ESP_OK) {
    if (twai_start() == ESP_OK) {
      // Test for messages for 2 seconds
      unsigned long testStart = millis();
      int testMessages = 0;
      
      while (millis() - testStart < 2000) {
        twai_message_t message;
        if (twai_receive(&message, pdMS_TO_TICKS(10)) == ESP_OK) {
          testMessages++;
        }
      }
      
      if (testMessages > 0) {
        Serial.println("# CAN connected - " + String(testMessages) + " messages received");
        
        // Update display with success
        tft.fillRect(0, 140, 320, 40, COLOR_BACKGROUND);
        tft.setTextColor(COLOR_SUCCESS);
        tft.setCursor(50, 155);
        tft.println("CAN Connected!");
        tft.setCursor(50, 175);
        tft.println("125KBPS - " + String(testMessages) + " msgs");
        delay(1000);
        return;
      } else {
        Serial.println("# CAN driver started but no messages - check vehicle");
      }
    }
  }
  
  Serial.println("# CAN warning - may work once vehicle is running");
  
  tft.fillRect(0, 140, 320, 40, COLOR_BACKGROUND);
  tft.setTextColor(COLOR_WARNING);
  tft.setCursor(50, 155);
  tft.println("CAN Ready");
  tft.setCursor(50, 175);
  tft.println("Start vehicle engine");
}

void updateDisplay() {
  tft.fillScreen(COLOR_BACKGROUND);
  
  // Title
  tft.setTextColor(COLOR_PRIMARY);
  tft.setFont(&FreeSansBold18pt7b);
  tft.setCursor(60, 35);
  tft.println("F150 Logger");
  
  // Status card
  tft.fillRoundRect(20, 60, 280, 120, 5, COLOR_CARD_BG);
  tft.drawRoundRect(20, 60, 280, 120, 5, COLOR_PRIMARY);
  
  tft.setTextColor(COLOR_TEXT);
  tft.setFont(&FreeSans12pt7b);
  tft.setCursor(30, 85);
  tft.println("CAPTURING");
  
  tft.setFont(&FreeSans9pt7b);
  tft.setCursor(30, 110);
  tft.println("Messages: " + String(messageCount));
  
  float elapsed = (millis() - sessionStartTime) / 1000.0;
  tft.setCursor(30, 130);
  tft.println("Time: " + String(elapsed, 1) + "s");
  
  tft.setCursor(30, 150);
  tft.println("Markers: " + String(markerCount));
  
  tft.setCursor(30, 165);
  tft.println("Send 'x' for marker");
  
  // Instructions
  tft.setTextColor(COLOR_SUCCESS);
  tft.setFont(&FreeSans9pt7b);
  tft.setCursor(20, 210);
  tft.println("Serial Command: x");
  tft.setCursor(20, 230);
  tft.println("Mark HVAC start/stop points");
}

void processSerialCommand() {
  if (!Serial.available()) return;
  
  String command = Serial.readStringUntil('\n');
  command.trim();
  
  if (command == "x" || command == "X") {
    markerCount++;
    unsigned long timestamp = millis();
    unsigned long elapsed = timestamp - sessionStartTime;
    
    // Output marker in CSV format
    Serial.println("# MARKER_" + String(markerCount) + "," + String(timestamp) + "," + String(elapsed));
    
    // Update display to show marker was received
    tft.fillRect(200, 145, 100, 20, COLOR_CARD_BG);
    tft.setTextColor(COLOR_SUCCESS);
    tft.setFont(&FreeSans9pt7b);
    tft.setCursor(200, 160);
    tft.println("MARKER " + String(markerCount));
  }
}

void loop() {
  static unsigned long lastDisplayUpdate = 0;
  static unsigned long lastLEDTime = 0;
  static bool ledState = false;
  
  // Check for serial commands
  processSerialCommand();
  
  // Capture CAN messages continuously
  twai_message_t message;
  while (twai_receive(&message, pdMS_TO_TICKS(1)) == ESP_OK) {
    unsigned long timestamp = millis();
    unsigned long elapsed = timestamp - sessionStartTime;
    
    // Output CSV format directly to serial
    Serial.print(timestamp);
    Serial.print(",");
    Serial.print(elapsed);
    Serial.print(",0x");
    Serial.print(message.identifier, HEX);
    Serial.print(",");
    Serial.print(message.data_length_code);
    
    // Output data bytes
    for (int i = 0; i < 8; i++) {
      Serial.print(",");
      if (i < message.data_length_code) {
        Serial.print("0x");
        if (message.data[i] < 16) Serial.print("0");
        Serial.print(message.data[i], HEX);
      }
    }
    
    // Extended frame flag
    Serial.print(",");
    Serial.println(message.extd ? "true" : "false");
    
    messageCount++;
  }
  
  // LED blink to show activity
  if (millis() - lastLEDTime > 500) {
    ledState = !ledState;
    digitalWrite(STATUS_LED_PIN, ledState);
    lastLEDTime = millis();
  }
  
  // Update display every 2 seconds
  if (millis() - lastDisplayUpdate > 2000) {
    lastDisplayUpdate = millis();
    
    // Only update the counters to avoid full screen refresh
    tft.fillRect(110, 95, 150, 70, COLOR_CARD_BG);
    tft.setTextColor(COLOR_TEXT);
    tft.setFont(&FreeSans9pt7b);
    tft.setCursor(110, 110);
    tft.println(String(messageCount));
    
    float elapsed = (millis() - sessionStartTime) / 1000.0;
    tft.setCursor(110, 130);
    tft.println(String(elapsed, 1) + "s");
    
    tft.setCursor(110, 150);
    tft.println(String(markerCount));
  }
  
  delay(1);
}